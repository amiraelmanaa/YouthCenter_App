{% extends 'base.html.twig' %}
{% block title %}Technician Dashboard - Maintenance Assignments{% endblock %}
{% block body %}
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
        color: #333;
        line-height: 1.6;
    }
    
    /* Navigation Bar */
    .navbar {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        color: white;
        padding: 1rem 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        position: sticky;
        top: 0;
        z-index: 1000;
    }
    
    .nav-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .nav-brand {
        font-size: 1.5rem;
        font-weight: bold;
        color: white;
        text-decoration: none;
    }
    
    .nav-links {
        display: flex;
        list-style: none;
        gap: 2rem;
    }
    
    .nav-links a {
        color: white;
        text-decoration: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        font-weight: 500;
    }
    
    .nav-links a:hover {
        background-color: rgba(255,255,255,0.1);
    }
    
    .nav-links a.logout {
        background-color: #dc2626;
        color: white;
    }
    
    .nav-links a.logout:hover {
        background-color: #b91c1c;
    }
    
    /* Main Content */
    .main-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    .dashboard-header {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        border-left: 4px solid #1e3a8a;
    }
    
    .dashboard-title {
        color: #1e3a8a;
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }
    
    .dashboard-subtitle {
        color: #64748b;
        font-size: 1.1rem;
    }
    
    .welcome-message {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
    }
    
    .welcome-message h2 {
        margin-bottom: 0.5rem;
    }
    
    /* Stats Cards */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }
    
    .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
        border-left: 4px solid #3b82f6;
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #1e3a8a;
        margin-bottom: 0.5rem;
    }
    
    .stat-label {
        color: #64748b;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    /* Assignments Section */
    .assignments-section {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }
    
    .section-header {
        background: #1e3a8a;
        color: white;
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
    }
    
    .refresh-btn {
        background: #3b82f6;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: background-color 0.3s ease;
    }
    
    .refresh-btn:hover {
        background: #2563eb;
    }
    
    /* Grid Layout */
    .assignments-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 1.5rem;
        padding: 2rem;
    }
    
    .assignment-card {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 1.5rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .assignment-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border-color: #3b82f6;
    }
    
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }
    
    .center-name {
        font-size: 1.2rem;
        font-weight: 600;
        color: #1e3a8a;
        margin-bottom: 0.5rem;
    }
    
    .priority-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        text-transform: uppercase;
    }
    
    .priority-high, .priority-urgent {
        background: #fee2e2;
        color: #dc2626;
    }
    
    .priority-medium {
        background: #fef3c7;
        color: #d97706;
    }
    
    .priority-low {
        background: #dcfce7;
        color: #16a34a;
    }
    
    .card-details {
        color: #64748b;
        margin-bottom: 1rem;
    }
    
    .card-details p {
        margin-bottom: 0.5rem;
    }
    
    .card-details strong {
        color: #374151;
    }
    
    .card-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
        flex-wrap: wrap;
    }
    
    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        font-weight: 500;
    }
    
    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    
    .btn-accept {
        background: #16a34a;
        color: white;
    }
    
    .btn-accept:hover:not(:disabled) {
        background: #15803d;
    }
    
    .btn-decline {
        background: #dc2626;
        color: white;
    }
    
    .btn-decline:hover:not(:disabled) {
        background: #b91c1c;
    }
    
    .btn-complete {
        background: #3b82f6;
        color: white;
    }
    
    .btn-complete:hover:not(:disabled) {
        background: #2563eb;
    }
    
    .btn-secondary {
        background: #6b7280;
        color: white;
    }
    
    .btn-secondary:hover {
        background: #4b5563;
    }
    
    /* Status Indicators */
    .status-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 0.5rem;
    }
    
    .status-pending {
        background: #f59e0b;
    }
    
    .status-accepted {
        background: #3b82f6;
    }
    
    .status-declined {
        background: #dc2626;
    }
    
    .status-completed {
        background: #16a34a;
    }
    
    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #64748b;
    }
    
    .empty-state h3 {
        margin-bottom: 1rem;
        color: #374151;
    }
    
    .empty-state .icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.3;
    }
    
    /* Notification */
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 5px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        transform: translateX(400px);
        transition: transform 0.3s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .notification.show {
        transform: translateX(0);
    }
    
    .notification.success {
        background-color: #16a34a;
    }
    
    .notification.error {
        background-color: #dc2626;
    }
    
    /* Loading State */
    .loading {
        opacity: 0.6;
        pointer-events: none;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        .nav-container {
            flex-direction: column;
            gap: 1rem;
        }
        
        .nav-links {
            gap: 1rem;
        }
        
        .main-container {
            padding: 1rem;
        }
        
        .assignments-grid {
            grid-template-columns: 1fr;
            padding: 1rem;
        }
        
        .dashboard-header {
            padding: 1.5rem;
        }
        
        .dashboard-title {
            font-size: 1.5rem;
        }
        
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .card-actions {
            flex-direction: column;
        }
        
        .btn {
            width: 100%;
        }
    }
    
    @media (max-width: 480px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }

  /* Technician info */
.form-input {
    width: 100%;
    padding: 0.5rem;
    margin-top: 0.25rem;
    margin-bottom: 1rem;
    border: 1px solid #d1d5db;
    border-radius: 5px;
    font-size: 1rem;
    color: #374151;
    background-color: #fff;
}

.form-input:disabled {
    background-color: #f1f5f9;
}


</style>

<nav class="navbar">
    <div class="nav-container">
        <a href="#" class="nav-brand">YouthCenter Maintenance</a>
        <ul class="nav-links">
            <li><a href="{{ path('app_logout') }}" class="logout">Logout</a></li>
        </ul>
    </div>
</nav>

<div class="main-container">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Technician Dashboard</h1>
        <p class="dashboard-subtitle">Manage maintenance assignments and track center status</p>
    </div>
    
    <div class="welcome-message">
        <h2>Welcome back, {{ controller_name }}!</h2>
        <p>You have {{ assignments|filter(a => a.status == 'pending')|length }} pending maintenance assignments that require your attention.</p>
    </div>
    
    <!-- Statistics -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-number">{{ assignments|length }}</div>
            <div class="stat-label">Total Assignments</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{{ assignments|filter(a => a.status == 'pending')|length }}</div>
            <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{{ assignments|filter(a => a.status == 'accepted')|length }}</div>
            <div class="stat-label">Accepted</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{{ assignments|filter(a => a.status == 'completed')|length }}</div>
            <div class="stat-label">Completed</div>
        </div>
    </div>
    
    <div class="assignments-section">
        <div class="section-header">
            <h2 class="section-title">Maintenance Assignments</h2>
            <button class="refresh-btn" onclick="location.reload()">Refresh</button>
        </div>
        
        <div class="assignments-grid">
            {% if assignments|length > 0 %}
                {% for assignment in assignments %}
                <div class="assignment-card" data-assignment-id="{{ assignment.id }}">
                    <div class="card-header">
                        <div>
                            <h3 class="center-name">{{ assignment.manager.center.name ?? 'Center Name' }}</h3>
                            <p style="color: #64748b; font-size: 0.9rem;">
                                <span class="status-indicator status-{{ assignment.status }}"></span>
                                Status: {{ assignment.status|title }}
                            </p>
                        </div>
                        <span class="priority-badge priority-{{ assignment.priority }}">{{ assignment.priority|title }} Priority</span>
                    </div>
                    <div class="card-details">
                        <p><strong>Issue:</strong> {{ assignment.description ?: 'No description provided' }}</p>
                        <p><strong>Manager:</strong> {{ assignment.manager.name ?: 'N/A' }}</p>
                        <p><strong>Contact:</strong> {{ assignment.manager.email ?: 'N/A' }}</p>
                        <p><strong>Assigned:</strong> {{ assignment.id ? 'Recently' : 'N/A' }}</p>
                    </div>
                    
                    <div class="card-actions">
                        {% if assignment.status == 'pending' %}
                            <button class="btn btn-accept" onclick="handleAssignment({{ assignment.id }}, 'accept')">
                                Accept Task
                            </button>
                            <button class="btn btn-decline" onclick="handleAssignment({{ assignment.id }}, 'decline')">
                                Decline
                            </button>
                        {% elseif assignment.status == 'accepted' %}
                            <button class="btn btn-complete" onclick="handleAssignment({{ assignment.id }}, 'complete')">
                                Mark Complete
                            </button>
                        {% elseif assignment.status == 'completed' %}
                            <button class="btn btn-secondary" disabled>
                                Completed ✓
                            </button>
                        {% elseif assignment.status == 'declined' %}
                            <button class="btn btn-secondary" disabled>
                                Declined
                            </button>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            {% else %}
                <div class="empty-state">
                    <div class="icon">🔧</div>
                    <h3>No assignments yet</h3>
                    <p>New maintenance assignments will appear here when they're assigned to you.</p>
                </div>
            {% endif %}
        </div>
    </div>
</div>


<!-- Notification -->
<div id="notification" class="notification"></div>


<!-- Technician Info -->
<div class="dashboard-header">
    <h2 class="dashboard-title">Your Profile</h2>
    <p class="dashboard-subtitle">View and edit your technician information.</p>
</div>

<div class="assignments-section" style="margin-bottom: 2rem;">
    <form id="profile-form" class="assignments-grid" style="grid-template-columns: 1fr;">
        <div class="assignment-card">
            <div class="card-details">
                <p>
                    <strong>Name:</strong>
                    <input type="text" id="tech-name" name="name" value="{{ technician.name }}" disabled class="form-input" />
                </p>
                <p>
                    <strong>Email:</strong>
                    <input type="email" id="tech-email" name="email" value="{{ technician.email }}" disabled class="form-input" />
                </p>
                <p>
                    <strong>Phone:</strong>
                    <input type="text" id="tech-phone" name="phone" value="{{ technician.phone ?? '' }}" disabled class="form-input" />
                </p>
            </div>

            <div class="card-actions">
                <button type="button" class="btn btn-secondary" onclick="enableEdit()">Edit</button>
                <button type="submit" class="btn btn-complete" style="display: none;">Save</button>
                <button type="button" class="btn btn-decline" onclick="cancelEdit()" style="display: none;">Cancel</button>
            </div>
        </div>
    </form>
</div>


<script>
// Notification System
function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${type}`;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 4000);
}

// Handle Assignment Actions
function handleAssignment(assignmentId, action) {
    const button = event.target;
    const card = button.closest('.assignment-card');
    
  
    button.classList.add('loading');
    button.disabled = true;
    
    let endpoint = '';
    let successMessage = '';
    
    switch(action) {
        case 'accept':
            endpoint = `/technician/assignment/${assignmentId}/accept`;
            successMessage = 'Assignment accepted successfully!';
            break;
        case 'decline':
            endpoint = `/technician/assignment/${assignmentId}/decline`;
            successMessage = 'Assignment declined';
            break;
        case 'complete':
            endpoint = `/technician/assignment/${assignmentId}/complete`;
            successMessage = 'Assignment marked as completed!';
            break;
        default:
            console.error('Invalid action:', action);
            return;
    }
    
    // Make API call
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            showNotification(successMessage, 'success');
            
         
            updateCardStatus(card, data.status);
            updateStatistics();
            
        } else {
            showNotification(data.message || 'Error processing request', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('Network error. Please try again.', 'error');
    })
    .finally(() => {
        button.classList.remove('loading');
        button.disabled = false;
    });
}

// Update card status and actions
function updateCardStatus(card, newStatus) {
    const statusIndicator = card.querySelector('.status-indicator');
    const statusText = card.querySelector('.card-header p');
    const actionsContainer = card.querySelector('.card-actions');
    
    
    statusIndicator.className = `status-indicator status-${newStatus}`;
    
    
    statusText.innerHTML = `<span class="status-indicator status-${newStatus}"></span>Status: ${newStatus.charAt(0).toUpperCase() + newStatus.slice(1)}`;
    
    
    let newButtons = '';
    switch(newStatus) {
        case 'accepted':
            newButtons = `<button class="btn btn-complete" onclick="handleAssignment(${card.dataset.assignmentId}, 'complete')">Mark Complete</button>`;
            break;
        case 'completed':
            newButtons = `<button class="btn btn-secondary" disabled>Completed ✓</button>`;
            break;
        case 'declined':
            newButtons = `<button class="btn btn-secondary" disabled>Declined</button>`;
            break;
    }
    
    actionsContainer.innerHTML = newButtons;
}

// Update statistics
function updateStatistics() {
    
    setTimeout(() => {
    }, 1000);
}

// Auto-refresh functionality 
function startAutoRefresh() {
    setInterval(() => {
        // Check for new assignments every 30 seconds
        fetch('/technician/dashboard', {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            
            console.log('Checked for updates');
        })
        .catch(error => {
            console.error('Auto-refresh error:', error);
        });
    }, 30000); // 30 seconds
}

function enableEdit() {
    document.querySelectorAll('#profile-form input').forEach(input => input.disabled = false);
    document.querySelector('#profile-form .btn-complete').style.display = 'inline-block';
    document.querySelector('#profile-form .btn-decline').style.display = 'inline-block';
    document.querySelector('#profile-form .btn-secondary').style.display = 'none';
}

// Cancel editing
function cancelEdit() {
    location.reload(); // Reload to reset form
}

// Handle form submission
document.getElementById('profile-form').addEventListener('submit', function(e) {
    e.preventDefault();

    const formData = {
        name: document.getElementById('tech-name').value,
        email: document.getElementById('tech-email').value,
        phone: document.getElementById('tech-phone').value
    };

    fetch('/technician/update-profile', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify(formData)
    })
    .then(res => {
        if (!res.ok) throw new Error('Update failed');
        return res.json();
    })
    .then(data => {
        if (data.success) {
            showNotification('Profile updated successfully!', 'success');
            setTimeout(() => location.reload(), 1500);
        } else {
            showNotification(data.message || 'Update error', 'error');
        }
    })
    .catch(err => {
        console.error(err);
        showNotification('Network error', 'error');
    });
});



</script>

{% endblock %}